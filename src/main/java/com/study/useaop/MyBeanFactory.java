package com.study.useaop;import com.study.proxy.Developer;import com.study.proxy.JavaDeveloper;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;/** * 工厂类，将切面类和目标类结合 */public class MyBeanFactory {    public static Developer createDeveloper() {        //target class        final Developer developer = new JavaDeveloper();        //aspect class        final MyAspect myAspect = new MyAspect();        //proxy class        /**         * 参数一         *  类加载器，动态代理类运行时创建，任何类都需要类加载器把它加载到内存         * 参数二         *  代理类需要实现的所有接口         * 参数三         *  InvocationHandler 处理类，接口，必须进行实现类，一般采用匿名内部提供invoke方法，代理类的每一个方法执行时，都将调用一次invoke         */        Developer proxyInstance = (Developer) Proxy.newProxyInstance(MyBeanFactory.class.getClassLoader(), developer.getClass().getInterfaces(), new InvocationHandler() {            @Override            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {                myAspect.before();                Object result = method.invoke(developer, args);                myAspect.after();                return result;            }        });        return proxyInstance;    }    public static void main(String[] args) {        Developer developer = MyBeanFactory.createDeveloper();        developer.debug();        developer.code();    }}