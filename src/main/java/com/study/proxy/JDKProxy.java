package com.study.proxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;public class JDKProxy implements InvocationHandler {    private Object target;//需要代理的目标对象    public Object getInstance(Object targetObject){        this.target = targetObject;//为目标target赋值        //JDK动态代理只能针对实现了接口的类进行代理，newProxyInstance 函数所需参数就可看出        return Proxy.newProxyInstance(targetObject.getClass().getClassLoader(),targetObject.getClass().getInterfaces(),this);    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println(this.getClass().getName()+"代理执行前");        Object result = method.invoke(target, args);        System.out.println(this.getClass().getName()+"代理执行后");        return result;    }}