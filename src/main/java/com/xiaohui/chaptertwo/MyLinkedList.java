package com.xiaohui.chaptertwo;public class MyLinkedList {    //头结点    private Node head;    //尾结点    private Node last;    //链表实际长度    private int size;    /**     *     * @param index 插入的位置     * @param data 插入的数据     */    public void insert(int index,int data){        if (index<0 || index>size){            throw new IndexOutOfBoundsException("超出链表结点范围");        }        Node insertNode = new Node(data);        if (size==0){            //空链表            head = insertNode;            last = insertNode;        } else if (index == 0){            //插入头部            insertNode.next = head;            head = insertNode;        } else if (index ==size){            //插入尾部            last.next = insertNode;            last = insertNode;        } else {            //插入中间            Node prevnode = get(index-1);            insertNode.next = prevnode.next;            prevnode.next = insertNode;        }        size++;    }    /**     *     * @param index 插入的位置     */    public Node remove(int index){        if (index<0 || index>=size){            throw new IndexOutOfBoundsException("超出链表结点范围");        }        Node removeNode = null;        if (index == 0){            //删除头结点            removeNode = head;            head = head.next;        } else if (index == size-1){            //删除尾结点            Node prevNode = get(index - 1);            removeNode = prevNode.next;            prevNode.next = null;            last = prevNode;        } else {            //删除中间结点            Node prevNode = get(index - 1);            Node nextNode = prevNode.next.next;            removeNode = prevNode.next;            prevNode.next = nextNode;        }        size--;        return removeNode;    }    /**     *     * @param index     * @return     */    public Node get(int index){        if (index<0 || index>=size){            throw new IndexOutOfBoundsException("超出链表结点范围");        }        Node temp = head;        for (int i=0;i<index;i++){            temp = temp.next;        }        return temp;    }    private static class Node{        int data;        Node next;        public Node(int data) {            this.data = data;        }    }    public void output(){        Node temp = head;        while (temp != null){            System.out.println(temp.data);            temp = temp.next;        }    }    public static void main(String[] args) throws Exception {        MyLinkedList myLinkedList = new MyLinkedList();        myLinkedList.insert(0,0);        myLinkedList.insert(1,1);        myLinkedList.insert(2,2);        myLinkedList.insert(3,3);        myLinkedList.remove(2);//        myLinkedList.insert(0,4);//        myLinkedList.insert(2,9);//        myLinkedList.insert(3,5);//        myLinkedList.insert(1,6);//        myLinkedList.remove(0);        myLinkedList.output();    }}