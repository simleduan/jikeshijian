package com.mainshi.proxy;import org.springframework.cglib.proxy.Enhancer;import org.springframework.cglib.proxy.MethodInterceptor;import org.springframework.cglib.proxy.MethodProxy;import java.lang.reflect.Method;//Cglib动态代理，实现MethodInterceptor接口public class CglibProxy implements MethodInterceptor {    private Object target;//需要代理的目标对象    public Object getInstance(Object objectTarget){        this.target = objectTarget;//为目标对象target赋值        Enhancer enhancer = new Enhancer();        //设置父类，因为cglib是针对指定的类生成一个子类，所以需要指定父类        enhancer.setSuperclass(objectTarget.getClass());        enhancer.setCallback(this);//设置回调        return enhancer.create();//创建并返回代理对象    }    @Override    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {        System.out.println(this.getClass().getName()+"代理执行前");        Object result = method.invoke(target,objects);        System.out.println(this.getClass().getName()+"代理执行后");        return result;    }}