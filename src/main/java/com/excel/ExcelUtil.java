package com.excel;import org.apache.poi.hssf.usermodel.*;import org.apache.poi.ss.usermodel.*;import org.apache.poi.xssf.usermodel.XSSFCell;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import java.io.*;import java.text.DecimalFormat;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import java.util.Map;public class ExcelUtil {    private static final String XLS = "xls";    private static final String XLSX = "xlsx";    public static void createExcel(Map<String, List<String>> map, String[] strArray){        String filePath = "/Users/fanbin/Desktop/txt/first.xls";        HSSFWorkbook workbook = new HSSFWorkbook();        HSSFSheet testsheet = workbook.createSheet("testsheet");        testsheet.setDefaultColumnWidth(20);        HSSFRow row = testsheet.createRow(0);        HSSFCellStyle cellStyle = workbook.createCellStyle();        cellStyle.setAlignment(HorizontalAlignment.CENTER);        //添加表头        HSSFCell cell = null;        for (int i=0;i<strArray.length;i++             ) {            cell = row.createCell(i);            cell.setCellValue(strArray[i]);            cell.setCellStyle(cellStyle);        }        //写入数据        int i=0;        for (String key:map.keySet()             ) {            row = testsheet.createRow(i+1);            i++;            List<String> stringList = map.get(key);            //创建单元格，并设置值            for (int j=0;j<strArray.length;j++                 ) {                row.createCell(j).setCellValue(stringList.get(j));            }        }        try {            FileOutputStream outputStream = new FileOutputStream(filePath);            workbook.write(outputStream);            outputStream.close();        } catch (Exception e) {            System.out.println("出现异常");            e.printStackTrace();        }        System.out.println("生成完毕");    }    public Workbook getWorkbook(InputStream inputStream,String fileType){        Workbook workbook = null;        try {            if (fileType.equalsIgnoreCase(XLS)){                workbook=new HSSFWorkbook(inputStream);            }else if (fileType.equalsIgnoreCase(XLSX)){                workbook=new XSSFWorkbook(inputStream);            }else {                System.out.println("请检查文件类型");            }        } catch (IOException e) {            e.printStackTrace();        }        return workbook;    }    public void readExcel(String filePath){        FileInputStream inputStream = null;        Workbook workbook = null;        //获取文件后缀        String fileType = filePath.substring(filePath.lastIndexOf(".") + 1, filePath.length());        //获取文件        File file = new File(filePath);        if (!file.exists()){            System.out.println("文件不存在");        }        try {            inputStream = new FileInputStream(filePath);            workbook = getWorkbook(inputStream, fileType);            //读取数据            parseExcel(workbook);        } catch (FileNotFoundException e) {            e.printStackTrace();        }    }    private void parseExcel(Workbook workbook) {        //解析sheet        for (int sheetNum=0;sheetNum<workbook.getNumberOfSheets();sheetNum++){            Sheet sheet = workbook.getSheetAt(sheetNum);            if (sheet==null) continue;            //获取第一行数据            int firstRowNum = sheet.getFirstRowNum();            Row firstRow = sheet.getRow(firstRowNum);            if (firstRow==null){                System.out.println("第一行没有数据");            }            //解析每一行数据            int rowStart = firstRowNum+1;            int rowEnd = sheet.getPhysicalNumberOfRows();            for (int rowNum = rowStart;rowNum<rowEnd;rowNum++){                Row row = sheet.getRow(rowNum);                if (row==null) continue;                convertRowToData(row);            }        }    }    private void convertRowToData(Row row) {        System.out.println(row.getCell(0));        System.out.println(row.getCell(0));        System.out.println(row.getCell(0));        System.out.println(row.getCell(0));    }    /**     * @param cell     * @return     */    public static String getStringValueFromCell(Cell cell) {        SimpleDateFormat sFormat = new SimpleDateFormat("MM/dd/yyyy");        DecimalFormat decimalFormat = new DecimalFormat("#.#");        String cellValue = "";        if(cell == null) {            return cellValue;        }        else if(cell.getCellType() == Cell.CELL_TYPE_STRING) {            cellValue = cell.getStringCellValue();        }        else if(cell.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {            if(HSSFDateUtil.isCellDateFormatted(cell)) {                double d = cell.getNumericCellValue();                Date date = HSSFDateUtil.getJavaDate(d);                cellValue = sFormat.format(date);            }            else {                cellValue = decimalFormat.format((cell.getNumericCellValue()));            }        }        else if(cell.getCellType() == Cell.CELL_TYPE_BLANK) {            cellValue = "";        }        else if(cell.getCellType() == Cell.CELL_TYPE_BOOLEAN) {            cellValue = String.valueOf(cell.getBooleanCellValue());        }        else if(cell.getCellType() == Cell.CELL_TYPE_ERROR) {            cellValue = "";        }        else if(cell.getCellType() == Cell.CELL_TYPE_FORMULA) {            cellValue = cell.getCellFormula().toString();        }        return cellValue;    }}